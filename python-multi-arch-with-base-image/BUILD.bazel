load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@aspect_rules_py//py:defs.bzl", "py_binary", "py_image_layer")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_image_index", "oci_load")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("//python-multi-arch-with-base-image:transition.bzl", "multi_arch")

# Build a py_binary for our python application
py_binary(
    name = "main",
    srcs = ["main.py"],
    deps = [
    ],
)

# https://github.com/aspect-build/bazel-examples/blob/main/oci_python_image/hello_world/BUILD.bazel
py_image_layer(
    name = "layers",
    binary = ":main",
)

# Build a py_binary for scapy
py_console_script_binary(
    name = "scapy",
    binary_rule = py_binary,
    pkg = "@pypi//scapy",
)

py_image_layer(
    name = "scapy_layers",
    binary = ":scapy",
)

#py_console_script_binary(
#    name = "kafka",
#    binary_rule = py_binary,
#    pkg = "@pypi//confluent_kafka",
#)
#
#py_image_layer(
#    name = "kafka_layers",
#    binary = ":kafka",
#)

# Build another multi-arch image on top of the base image
oci_image(
    name = "image",
    base = "//python-multi-arch-with-base-image/base-image:image",
    entrypoint = ["//python-multi-arch-with-base-image/main"],
    tars = [
        ":layers",
        ":scapy_layers",
        #        ":kafka_layers",
    ],
)

platform_transition_filegroup(
    name = "platform_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": ":linux_arm64",
        "@platforms//cpu:x86_64": ":linux_amd64",
    }),
)

oci_load(
    name = "load",
    image = ":platform_image",
    repo_tags = ["vinnybod/py-image:latest"],
)

platform(
    name = "linux_arm64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:arm64",
    ],
    visibility = ["//visibility:public"],
)

platform(
    name = "linux_amd64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "platform_darwin_arm64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:arm64",
    ],
)

config_setting(
    name = "platform_darwin_amd64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "platform_linux_amd64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)
