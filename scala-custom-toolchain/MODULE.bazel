bazel_dep(name = "rules_jvm_external", version = "6.7")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "org.scala-lang:scala-library:2.13.16",
        "org.scala-lang:scala-reflect:2.13.16",
        "org.scala-lang:scala-compiler:2.13.16",
        "org.scala-lang.modules:scala-parser-combinators_2.13:2.4.0",
        "org.scala-lang.modules:scala-xml_2.13:2.3.0",
    ],
    lock_file = "//:maven_install.json",
)
use_repo(maven, "maven")

# You can add `repo_name = "io_bazel_rules_scala"` if you still need it.
bazel_dep(name = "rules_scala", version = "7.0.0")

# Selects the Scala version and other configuration parameters.
#
# 2.12 is the default version. Use other versions by passing them explicitly, as
# illustrated below.
#
# See the documentation of `_settings_attrs` in `scala/extensions/config.bzl`
# for other available parameters.
#
# You may define your own custom toolchain using Maven artifact dependencies
# configured by your `WORKSPACE` file, imported using an external loader like
# https://github.com/bazelbuild/rules_jvm_external. See docs/scala_toolchain.md.
scala_config = use_extension(
    "@rules_scala//scala/extensions:config.bzl",
    "scala_config",
)
scala_config.settings(scala_version = "2.13.16")

# See the `scala/extensions/deps.bzl` docstring for a high level description of
# the tag classes exported by this module extension.
scala_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
)

# Defines a default toolchain repo for the configured Scala version that loads
# Maven deps like the Scala compiler and standard libs. Enable and configure
# other builtin toolchains by instantiating their corresponding tag classes.
# See the documentation in `scala/extensions/deps.bzl` for all builtin
# toolchain configuration options.
#
# On production projects, you may consider defining a custom toolchain to use
# your project's required dependencies instead. In that case, you can omit using
# the module extension and this next line altogether. Or, you can still use the
# module extension to instantiate other optional `rules_scala` toolchains
# without it.

#########
# Default toolchain
#########
# scala_deps.scala()

##########
# Custom toolchain
##########
register_toolchains("@//toolchains:my_toolchain")
